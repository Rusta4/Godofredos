"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalAppHostingConfiguration = exports.loadAppHostingYaml = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const utils_1 = require("../../utils");
const utils_2 = require("./utils");
const types_1 = require("../types");
const APPHOSTING_YAML = "apphosting.yaml";
const APPHOSTING_LOCAL_YAML = "apphosting.local.yaml";
async function loadAppHostingYaml(sourceDirectory, fileName) {
    const file = await (0, utils_1.readFileFromDirectory)(sourceDirectory, fileName);
    const apphostingYaml = await (0, utils_1.wrappedSafeLoad)(file.source);
    const environmentVariables = {};
    const secrets = {};
    if (apphostingYaml.env) {
        for (const env of apphostingYaml.env) {
            if (env.value) {
                environmentVariables[env.variable] = env.value;
            }
            if (env.secret) {
                secrets[env.variable] = env.secret;
            }
        }
    }
    return { environmentVariables, secrets };
}
exports.loadAppHostingYaml = loadAppHostingYaml;
async function getLocalAppHostingConfiguration(sourceDirectory) {
    let apphostingBaseConfig = {};
    let apphostingLocalConfig = {};
    if (await (0, fs_extra_1.pathExists)((0, path_1.join)(sourceDirectory, APPHOSTING_YAML))) {
        utils_2.logger.logLabeled("SUCCESS", types_1.Emulators.APPHOSTING, `${APPHOSTING_YAML} found, loading configuration`);
        apphostingBaseConfig = await loadAppHostingYaml(sourceDirectory, APPHOSTING_YAML);
    }
    if (await (0, fs_extra_1.pathExists)((0, path_1.join)(sourceDirectory, APPHOSTING_LOCAL_YAML))) {
        utils_2.logger.logLabeled("SUCCESS", types_1.Emulators.APPHOSTING, `${APPHOSTING_LOCAL_YAML} found, loading configuration`);
        apphostingLocalConfig = await loadAppHostingYaml(sourceDirectory, APPHOSTING_LOCAL_YAML);
    }
    return {
        environmentVariables: Object.assign(Object.assign({}, apphostingBaseConfig.environmentVariables), apphostingLocalConfig.environmentVariables),
        secrets: Object.assign(Object.assign({}, apphostingBaseConfig.secrets), apphostingLocalConfig.secrets),
    };
}
exports.getLocalAppHostingConfiguration = getLocalAppHostingConfiguration;
